/*--------------------------------------Theme Creation-----------------------------------------*/
1. create theme directory inside /themes with the theme name.
2. Put css, js, images, template, logo.svg, .info.yml, .libraries.yml, .theme etc files and folders inside your theme directory.
3. Create THEME.info.yml file. Here we'll define the regions and libraries for global styling.
4. Create THEME.libraries.yml file to include css and js on all pages.
5. Create THEME.breakpoints.yml file to add media queries.
6. Create THEME.theme file to add preprocess and other theme functions.
7. Create page.html.twig, page--front.html.twig files to theme front and inner pages.
8. Create html.html.twig file to add meta tags in page head section.
9. To DISABLE CACHE: In settings.local.php file uncomment "# $settings['cache']['bins']['render'] = 'cache.backend.null';".
10. We can set logo, base_path and args in THEME_preprocess_page(), to use them in page templates
11. "theme-settings.php" is same as it is in drupal7.


To clear cache:

    // Kills the cache for the anonymous users.
    \Drupal::service('page_cache_kill_switch')->trigger();


To enable Errors messages in placed of empty white page by adding a few lines to your settings.php file:
	error_reporting(E_ALL);
	ini_set('display_errors', TRUE);
	ini_set('display_startup_errors', TRUE);

	In addition, navigate to Administration→ Configuration→ Development → logging and errors and select "All messages". (This sets $conf['error_level'] = 2; .)


To enable theme suggestions:
	1. set "debug: true" in services.yml file.



To create permissions (D7 hook_permission)
	create my_module.permissions.yml file and simply write you permission here. For example:
	custom node create:
	  title: 'Create nodes from custom module'
	  description: 'Create offers and locations from module.'


To create access callback:
	method1: define 
		requirements: 
	    	_custom_access: 'Drupal\module_name\Controller\ModuleNameController::access_callback_function' in module_name.routing.yml
	    	and create controller ModuleNameController and the function access_callback_function() will be called as callback 

	method2: in .module file in hook_menu define access callback as:
		'access callback' => 'access_callback_function' and this callback can be placed in ModuleNameController file with 'access_callback_function' name.

	return value in the form of return AccessResult::forbidden(); return AccessResult::allowed();


To create links:
	use Drupal\Core\Url;
	use Drupal\Core\Link;

	$url = Url::fromRoute('youtube.generateLink', array('youtube_id' => NID));
	$project_link = Link::fromTextAndUrl(t('Create'), $url);
	$project_link = $project_link->toRenderable();
	$project_link = render($project_link);


Node save code:
	use Drupal\node\Entity\Node;
	use Drupal\file\Entity\File;

	// node save start
	// Create file object from remote URL.
	$data = file_get_contents('http://realityloop.com/sites/realityloop.com/files/styles/article_image_header_breakpoints_theme_realityloop_theme_wide_1x/public/drupal8.png');
	$file = file_save_data($data, 'public://druplicon.png', FILE_EXISTS_REPLACE);

	1. 	$node = Node::create([
		   'type'        => 'article',
		   'title'       => 'Druplicon test',
		   'field_image' => [
		    'target_id' => $file->id(),
		    'alt' => 'Hello world',
		    'title' => 'Goodbye world'
		  ],
		]);
		$node->save();
						OR
	2. 
		$my_article = Node::create(['type' => 'article']);
		$my_article->set('title', 'My article');
		$my_article->set('body', 'My text'); //text field
		$my_article->set('field_image', $file->id()); // file field
		$my_article->set('field_hobbies', array(1,3)); // select lists and checkboxs
		$my_article->enforceIsNew();
		$my_article->save();
		// end node save

Node Update:
	$node = Node::load($nid); // load node
	$node->set('title', $title);
	$node->body->value = $body;
	$node->body->format = 'full_html';
	$node->set('field_age', $age);
	$node->set('field_gender', $gender);
	$node->set('field_offer_url', $offer_url);
	$node->save();


Node Delete:
	$storage_handler = \Drupal::entityTypeManager()->getStorage('node');
    $entities = $storage_handler->loadMultiple(array($nids));
    $storage_handler->delete($entities);



To get values from entity use
	1. $entity->body->value;
	2. $entity->get('body')->getValue()[0]['value']; // for image
	3. $def_business_type = array(); // for tid and node reference
	    if (!empty($offer->get('field_business_type')->getValue())) {
	        foreach ($offer->get('field_business_type')->getValue()as $key => $tid) {
	            $def_business_type[] = $tid['target_id'];
	        }
	    }

To get the String:protected in #markup, use __toString():  // __toArray() for protacted arrays.
	$variables['rows'][$key]['columns']['title']['content'][0]['field_output']['#markup']->__toString();

	and to set, use:
		$variables['rows'][$key]['columns']['title'] = Drupal\Core\Render\Markup::create($user->name);


To load user:
	1. By Id: $user = \Drupal\user\Entity\User::load($uid);
	2. Current user:
		$account = \Drupal::currentUser();
		$user = new stdClass();
		$user->name = !empty($account->getAccount()->getUserName()) ? $account->getAccount()->getUserName() : '';
		$user->id = !empty($account->getAccount()->id()) ? $account->getAccount()->id() : 0;

		$user->roles = !empty($account->getAccount()->getRoles()) ? $account->getAccount()->getRoles() : array();
		$user->mail = !empty($account->getAccount()->getEmail()) ? $account->getAccount()->getEmail() : '';


To redirect on other page:
	After a form submission:
		add $form_state->setRedirect('yourroute'); // set the form redirect



Taxonomy terms:
	To get all vocabularies:
		$vocabs = taxonomy_vocabulary_get_names();

	To get all terms in vocabulary:(In this case used in THEME.theme file to provide all terms of a vocabulary in page.html.twig)
		foreach ($vocabs as $key => $vocab) {
			$query = \Drupal::entityQuery('taxonomy_term');
			$query->condition('vid', $vocab);
			$tids = $query->execute();
			$terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);
			foreach ($terms as $key => $term) {
			  	$variables[$vocab][$term->id()] = $term->toLink()->getText();
			}
		}
		And to use this in .html.twig file use:
			<ul>
			  {% for tid,tname in tags %}
			    <li tid="{{ tid }}">{{ tname }}</li>
			  {% endfor %}
			</ul>

To attach libraries:
Form:
	$form['#attached']['library'][] = 'module_name/library_name';
Twig Template:
	{{ attach_library('nokia_base/uxgBlogSite') }}
Controller:
	To attach libraries: // From Controller
		$build['faq'] = array(
	      	'#theme' => 'faq',
	      	'#items' => $items,
	    );
	    // Attach our custom  library
	    $build['faq']['#attached']['library'][] = 'mymodule/accordion';
	    return $build;

Route:
	For path with slug:
		{{ path('custom_node_form.update_article', {'aid': nid}) }}


Watchdog:
	  \Drupal::logger('my_module')->notice("<pre>".print_r($client->generateLead($form_data), true)."</pre>");

	  \Drupal::logger('vdm_c4c')->error($error->getMessage());


Menu 
    Multi lingual menu item filter by language
	function vandermoortele_preprocess_menu(&$variables) { 
	  error_reporting(E_ALL);
	  ini_set('display_errors', TRUE);
	  ini_set('display_startup_errors', TRUE);

	  if($variables['menu_name'] == 'footer-sitemap-menu'){
	    $items = $variables['items'];
	    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	    //kint($language);exit();
	    foreach ($items as $key => $item) {
	      $current_langu = "";
	      $plugin_id = $item['original_link']->getPluginId();
	      list($entity_type, $uuid) = explode(':', $plugin_id, 2);
	      if ($entity_type == 'menu_link_content') {
		try {
		  $entity = \Drupal::entityManager()
		    ->loadEntityByUuid($entity_type, $uuid);
		  $translation = \Drupal::entityManager()->getTranslationFromContext($entity);
		  $t_langu_id = $translation->language()->getId();
		  //kint($t_langu_id);exit;
		}
		catch (PluginNotfoundException $e) {
		  // Make sure we catch failed entity loadings.
		}
		if($t_langu_id != $language){
		  unset($variables['items'][$key]);
		}
	      }
	      if(!empty($item['below'])){
		foreach ($item['below'] as $key2 => $item2) {
		  if($item2['title'] == "Spaaracties"){
		    $current_langu = "";
		    $plugin_id = $item2['original_link']->getPluginId();
		    list($entity_type, $uuid) = explode(':', $plugin_id, 2);
		    if ($entity_type == 'menu_link_content') {
		      try {
		        $entity = \Drupal::entityManager()
		          ->loadEntityByUuid($entity_type, $uuid);
		        $translation = \Drupal::entityManager()->getTranslationFromContext($entity);
		        $t_langu_id = $translation->language()->getId();
		        
		        //kint($t_langu_id);exit;
		      }
		      catch (PluginNotfoundException $e) {
		        // Make sure we catch failed entity loadings.
		      }
		      if($t_langu_id != $language){
		        unset($variables['items'][$key]['below'][$key2]);
		      }
		    }
		  }
		}
	      }
	    }
	  }
	}

Setting ang getting global variables:
	Drupal 7

		  variable_set('my_data', 'foo');
		  $data = variable_get('my_data', 'bar');
		  variable_del('my_data');

	Drupal 8

		  \Drupal::state()->set('my_data', 'foo');
		  $data = \Drupal::state()->get('my_data') ?: 'bar';
		  \Drupal::state()->delete('my_data');

Checking permission: 
	User::hasPermission($permission);

To add data in content of a node:
	$build['content']['arguments'] = array(
        '#type' => 'inline_template', // 'inline_template' is used insted of '#markup' because #markup will remove some tags.
        '#template' => theme_procon_render_arguments($build['#node']),
        // '#context' => [
        //   // 'somecontent' => theme_procon_render_arguments($build['#node'])
        // ]
      );
Custom Service:
	1. create service in MODULE.services.yml
	    EX:
		services:
		  custom_node_form.test_service:
		    class: Drupal\custom_node_form\Service\TestService
		    arguments: ['@current_user']
	2. Create the class and make methods and members.
	3. Use the servie: 
		A) From controller

		use Symfony\Component\DependencyInjection\ContainerInterface;
		use Drupal\custom_node_form\Service\TestService;
		use Drupal\Core\Logger\LoggerChannelFactoryInterface;

		private $testService;
		protected $loggerFactory;
		public function __construct(TestService $testService,  LoggerChannelFactoryInterface $loggerFactory)
    		{
        		$this->testService = $testService;
        		$this->loggerFactory = $loggerFactory;
		}

		
		public static function create(ContainerInterface $container) {
	    		$testService = $container->get('custom_node_form.test_service');
	    		$loggerFactory = $container->get('logger.factory');
	    		return new static($testService, $loggerFactory);
		}
		/*
		* Callback for test-service path
		*/
		public function test_srvice_example() {
			$test_service = $this->testService;
			$uid = $this->loggerFactory->get('test uid')->debug($test_service->getAccountId());
			$name = $test_service->getAccount()->getAccount()->name;
			$mail = $this->loggerFactory->get('test u_email')->debug($test_service->getAccount()->getAccount()->getEmail());
			// kint($test_service->getAccount()->getAccount()); exit();
			// $user_id = $test_service;
    			$build = array(
	     		 '#type' => 'markup',
	     		 '#markup' => t('Hello ' . $name),
	    		);
	    		return $build;
		}
	B) From module
		use Drupal\vdm_market\Service\MarketService;

		public static function create(ContainerInterface $container) {
    			$market_service = $container->get('vdm_market.market_service');
    			return new static($market_service);
  		}

Login as user 1 drupal 8:
		use Drupal\Core\DrupalKernel;
		use Symfony\Component\HttpFoundation\Request;

		$autoloader = require_once 'autoload.php';

		$kernel = new DrupalKernel('prod', $autoloader);

		$request = Request::createFromGlobals();
		$response = $kernel->handle($request);

		if ($_GET['test'] == 111) {
			$uid = 1;
			$user = Drupal\user\Entity\User::load($uid);
			user_login_finalize($user);
		}
		$response->send();

		$kernel->terminate($request, $response);
		
		
		                     OR

                $uid ='1';
                $account = \Drupal\user\Entity\User::load($uid);
                \Drupal::service('session')->migrate();
                \Drupal::service('session')->set('uid', $account->id());
                \Drupal::moduleHandler()->invokeAll('user_login', array($account));



To load a block
        1. by machine_name/delta:
		$con = \Drupal\block\BlockViewBuilder::lazyBuilder('sharethis', 'full');
    		$d   = \Drupal::service('renderer')->renderPlain($con);
		$variables['sharethis'] = $d->__toString();
        2. by id:
                $custom_block = \Drupal::entityTypeManager()->getStorage('block_content')->load('4');
                $variables['advertisement'] = $custom_block->field_myfield->value;	
		
		
		
To setup multi-site:
                drush site-install --db-url=mysql://USER:PASS@localhost/DATABASENAME --sites-subdir=sitename
            Ex:
                drush site-install --db-url=mysql://nokia_blog:nokia_blog@localhost/nokia_blog --sites-subdir=blog.nokia.agile451.com
                blog.nokia.agile451.com is subdomain.
                

Entity Field Query:
                   $ids = \Drupal::entityQuery('node')
                      ->condition('type', 'blog)
                      ->condition('field_id', $id)
                      ->execute();




Get Image url from uri:
        In original size:
                In twig: file_url(node.field_speedbump_image.0.entity.uri.value);
                In module: file_create_url($uri);
        With Image style:
                In module:
                      $style2 = ImageStyle::load($style);
                      if($style2 != null && $style2 != ''){
                        $uri2 = $style2->buildUri($uri);
                        $style2->createDerivative($uri, $uri2);
                        $output = $style2->buildUrl($uri);
                      }else{
                        $output = file_create_url($uri);
                      }
                      
                In twig: Craete a filter and use the above code to chove this.(See nokia blog side for reference)


Render image with image style in twig:
        {% set author_headshot = {
                '#theme':      'image_style',
                '#style_name': 'author_headshot',
                '#uri':        node.field_authors.entity.get('field_headshot').entity.uri.value,
                '#alt':        node.field_authors.entity.get('field_headshot').alt,
                '#attributes': '',
        } %}





Update.php:
	Page not found:
		Possible changes:
			1) Check if the file exists on the drupal root
			2) update.php must have 755 permission.
			3) Check the .htaccess file update.php may be restricted from there:
				# Protect files and directories from prying eyes.
				<FilesMatch "^update\.php$|^xmlrpc\.php$|^install\.php$|\.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl|svn-base)$|^(code-style\.pl|Entries.*|Repository|Root|Tag|Template|all-wcprops|entries|format)$">
				  Order allow,deny
				</FilesMatch>

Set attributes in twig:
	{% set wrapper_attribute = create_attribute() %}
	{%
	  set wrapper_classes = [
	    'explore-5G',
	    'bg-dark',
	    'color-white',
	  ]
	%}
	{% set wrapper_attribute = wrapper_attribute.addClass(wrapper_classes) %}

	{% if (node.field_speedbump_image.0.entity.uri.value) is not empty %}
	    {% set bg_img = node.field_speedbump_image.0.entity.uri.value | image_styles('speedbump_image') %}
	    {% set wrapper_attribute = wrapper_attribute.setAttribute('style', 'background-image: url(' ~ bg_img ~ ')') %}
	{% endif %}

    <div{{ wrapper_attribute }}></div>


=============================================================================================================================

Link in a twig file:
    <a href="{{path('entity.taxonomy_term.canonical', {'taxonomy_term': tag.entity.id() }) | rewritepath }}">
        {{ tag.entity.getName|convert_encoding('UTF-8', 'HTML-ENTITIES') | raw}}
    </a>

=============================================================================================================================

$form['article']['start_date'] = array(
            '#type' => 'datetime',
            '#title' => t('Start Date'),
            '#date_date_format' => $date_format,
            '#date_time_format' => $time_format,
            '#default_value' => \Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp($def_start_date),
        );


=============================================================================================================================

Set active trail for menu breadcrumb:

use Drupal\Core\Database\Database;

if (($group = $this->getContextValue('group')) && $group->id()) {
  // Sets the active trail, for breadcrumb menu, by current group.
  if ($entity) {
    $active_link = $this->menuLinkManager->loadLinksByRoute('entity.node.canonical', ['node' => $entity->id()]);
    if (!empty($active_link)) {
      foreach ($active_link as $link_id => $link) {
        $id_array = explode(':', $link_id);
        if (isset($id_array)) {
         $uuid = $id_array[1];
         $connection = Database::getConnection();
         $query = $connection->select('menu_link_content', 'mlc');
         $query->leftJoin('group_content_field_data', 'gcfd', 'mlc.id = gcfd.entity_id');
         $query->fields('gcfd', []);
         $query->condition('mlc.uuid', $uuid, '=');
          $query->condition('gcfd.type', 'microsite-group_menu-main', '=');
          $entries = $query->execute()->fetchAll();
          if (!empty($entries) && ($entries[0]->gid == $group->id())) {
            $active_trail = $this->menuLinkManager->getParentIds($link_id);
            $active_trail[''] = '';
            $parameters->setActiveTrail($active_trail);
            break;
          }
        }
      }
    }
  }
}

=============================================================================================================================

Get referenced field values in node template:
	{{ node.ref_field_name.entity.field_name.value }}

Get paragraph parent entity object in paragraph template:
	paragraph.getParentEntity()
	Examples:
		paragraph.getParentEntity().hasField('field_script_tag')
		paragraph.getParentEntity().field_script_tag.entity.field_color_class.value

	if ($node->bundle() == 'video_script_template') {
	    $variables['video_script_template'] = [];
	    if ($node->hasField('field_script') && !$node->get('field_script')->isEmpty()) {
	        $total = 0;
	        foreach ($node->field_script as $key => $para) {
	          if ($para->entity && $para->entity->hasField('field_paragraph_type') && !$para->entity->get('field_paragraph_type')->isEmpty()) {
	            $variables['video_script_template']['timeline'][$key]['pid'] = $para->entity->id();
	            $variables['video_script_template']['timeline'][$key]['title'] = '';
	            $variables['video_script_template']['timeline'][$key]['wpm'] = '';
	            if ($para->entity->hasField('field_paragraph_type') && !$para->entity->get('field_paragraph_type')->isEmpty()) {
	              $variables['video_script_template']['timeline'][$key]['title'] = $para->entity->field_paragraph_type->entity->getName();
	            }
	            if ($para->entity->hasField('field_para') && !$para->entity->get('field_para')->isEmpty()) {
	              $words = str_word_count($para->entity->field_para->value);
	              $variables['video_script_template']['timeline'][$key]['wpm'] = countVideoLengthFromWords($words);
	              $length = countVideoLengthFromWords($words);
	              $variables['video_script_template']['timeline'][$key]['wpm_width'] = $length * 100;
	              $total += $variables['video_script_template']['timeline'][$key]['wpm'];
	            }
	            $variables['video_script_template']['timeline'][$key]['color_class'] = 'color-orange';
	            if ($para->entity && $para->entity->hasField('field_paragraph_type') && !$para->entity->get('field_paragraph_type')->isEmpty()) {
	              $variables['video_script_template']['timeline'][$key]['color_class'] = $para->entity->field_paragraph_type->entity->get('field_color_class')->getValue()[0]['value'];
	            }
	          }
	        }
	        $variables['video_script_template']['timeline_total']['title'] = t('Total');
	        $variables['video_script_template']['timeline_total']['wpm_width'] = $total * 100;
	        $variables['video_script_template']['timeline_total']['wpm'] = $total;
	        $variables['video_script_template']['timeline_total']['color_class'] = 'color-green';
	    }
	  }

=============================================================================================================================

To add new line in mail body:
	1.
		/*
		* @param $key, &$message, $params
		* function hook_mail()
		*/
		function custom_mail_mail($key, &$message, $params){
			$headers = array(
		        'MIME-Version' => '1.0',
		        'Content-Type' => 'text/html; charset=iso-8859-1; format=flowed',
		        'Content-Transfer-Encoding' => '8Bit',
		        'X-Mailer' => 'Drupal',
		    );
		    foreach ($headers as $key => $value) {
		        $message['headers'][$key] = $value;
		    }
		    $message['subject'] = $params['subject'];
		    $message['body'][] =  $params['body'];
		}
	2. 
		/**
		 * Implements hook_mail().
		 */
		function howden_adminconfig_mail($key, &$message, $params) {
		  if (empty($message['headers'])) {
		    $message['headers'] = [];
		  }
		  $headers = [
		    'MIME-Version' => '1.0',
		    'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
		    'Content-Transfer-Encoding' => '8Bit',
		    'X-Mailer' => 'Drupal',
		  ];
		  switch ($key) {
		    case 'product_enquiry':
		      foreach ($headers as $k => $value) {
		        $message['headers'][$k] = $value;
		      }
		      $message['from'] = \Drupal::config('system.site')->get('mail');
		      $message['subject'] = $params['title'];
		      $message['body'][] = Html::escape($params['message']);
		      break;
		  }
		}
		public function submitForm(array &$form, FormStateInterface $form_state) {
		    
		    $langcode = $this->languageManager->getDefaultLanguage()->getId();
		    $params['title'] = $this->t('There is a product enquiry for you.');
		    $params['message'] = t("You have an enquiry with below details:<br>
		        <table border='1'>
		          <tr>
		            <th>Filter</th>
		            <th>Value</th>
		          </tr>
		          <tr>
		            <td>Cover</td>
		            <td>@cover</td>
		          </tr>
		        </table>
		        <p>--  @site_name team</p>", [
		          '@cover' => $product_cover,
		          '@site_name' => $this->configFactory->get('system.site')->get('name'),
		        ]);
		    $message = $this->mailManager->mail('howden_adminconfig', 'product_enquiry', implode(',', $emails), $langcode, $params);
		    // Error logging is handled by \Drupal\Core\Mail\MailManager::mail().
		    if ($message['result']) {
		      $this->logger->notice('Sent enquiry to emails associated with the submitted terms.');
		    }
		    $message = t('Your enquiry sent successfully!');
		    \Drupal::messenger()->addStatus($message);
		}

Custom Layout:
	See Caravrangal(Joao)
	Nokia Blog

=============================================================================================================================

seconds to Time ago:
	$diff = time() - $last_time;
    if ($diff) {
        $time = \Drupal::service('date.formatter')->formatInterval($diff);
    }

=============================================================================================================================

# Redirect HTTP to HTTPS
  RewriteCond %{HTTPS} off
  RewriteCond %{HTTP:X-Forwarded-Proto} !https
  RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

=============================================================================================================================

Format plural strings:
  \Drupal::translation()->formatPlural($num, '1 entity', '@count entities');

=============================================================================================================================

Make payment Programatically 


	$payment = Payment::create([
	          'bundle' => 'my_entity',
	        ]);

	        // Set up my custom payment method.
	        $payment_method_manager = \Drupal::service('plugin.manager.payment.method');
	        $payment->setPaymentMethod($payment_method_manager->createInstance($this->my_service->getPaymentMethodActivated()));

	        // Set custom payment type, doing this I added the setPaymentType function, because without this Unavailable payment is set instead of my custom payment type
	        //$payment_type_manager = \Drupal::service('plugin.manager.payment.type');
	        $payment->setPaymentType($payment_type_manager->createInstance($this->my_service->getPaymentTypeActivated()));

	        $payment->setCurrencyCode('USD');

	        // Create a Line Item instance.
	        $line_item_manager = \Drupal::service('plugin.manager.payment.line_item');
	        $line_item = $line_item_manager->createInstance('payment_basic')
	          ->setDescription('some description')
	          ->setQuantity(1)
	          ->setAmount(150)
	          ->setName('some name')
	          ->setCurrencyCode('USD');
	        $payment->setLineItems([$line_item]);

	        $payment->execute();

	-----------

	Check Payment status

	$payments = \Drupal\commerce_order\Payment\Payment::loadByProperties(['order_id' => $order->id()]);
	$payment->getState()

	pending or Completed

=============================================================================================================================

Steps to update Drupal core (Need to test):
	1. Check Drupal core update is actually available:
		composer outdated "drupal/*"
	2. Read the core release notes. Some contributed modules or themes may need updating to work with a new "minor" version (e.g. 8.3 to 8.4) of core.  Patch releases (e.g. 8.4.4 to 8.4.5) shouldn't require this. To detect the needed module or theme updates, you need to read the project page or release notes.
	3. If update for core is available then open composer.json at the root of the project.
	4. update core version to latest:
		"require": {
		    "drupal/core": "^8.7.0",
    5. Run composer updates.
    6. Run DB updates.
    7. Clear drupal cache: drush cr.

=============================================================================================================================


Get paragraph translated field in twig:

{% set event_hero = content.field_events_hero_content['#items'].entity %}
<article class="event_card_node card card--style-stacked card--has-next card-next-type--stacked card--style-cta">
    <div class="gel-content-container">
      <div class="card__inner">
         <div class="card__content">
            <div class="content__body">
               <div class="body__body">
                  {% if event_hero.body %}
                     {% set text = event_hero.translation(language).body.0.value | render | striptags %}
                     {{ text|length > 200 ? text|slice(0, 200) : text }}
                  {% endif %}
               </div>
            </div>
            <div class="event__details">
               {% if event_hero.field_event_date %}
                 <div class="event_date"><div>{% trans %}Date{% endtrans %}:</div><span>{{ event_hero.translation(language).field_event_date.0.value }}</span></div>
               {% endif %}
               {% if event_hero.field_event_time %}
                 <div class="event_time"><div>{% trans %}Time{% endtrans %}:</div><span>{{ event_hero.translation(language).field_event_time.0.value }}</span></div>
               {% endif %}
               {% if event_hero.field_venue %}
                 <div class="event_location"><div>{% trans %}Location{% endtrans %}:</div><span>{{ event_hero.translation(language).field_venue.0.address_line1 }}</span></div>
               {% endif %}
              {% if event_hero.field_aimed_at %}
                 <div class="event_aimed"><div>{% trans %}Aimed at{% endtrans %}:</div><span>{{ event_hero.translation(language).field_aimed_at.0.value }}</span></div>
              {% endif %}
               {% if event_hero.field_organiser %}
                 <div class="event_oraganiser"><div>{% trans %}Organiser{% endtrans %}:</div><span>{{ event_hero.translation(language).field_organiser.0.value }}</span></div>
               {% endif %}
               {% if event_hero.field_cost %}
                 <div class="event_cost"><div>{% trans %}Cost{% endtrans %}:</div><span>{{ event_hero.translation(language).field_cost.0.value }}</span></div>
               {% endif %}
            </div>
         </div>
      </div>
    </div>  
</article>

=============================================================================================================================

Setup Drupal 8 using composer.
1) Download the latest drupal using composer.
	composer create-project drupal-composer/drupal-project:8.x-dev /var/www/html/caravanismo --stability dev --no-interaction
2) Install drupal and configure the site.
3) Index.php error reporting on and debug true for local site ; need to disable on production.

=============================================================================================================================

Get moderation state from node:
	// Check if we are viewing the default revision.
    if ($entity->isDefaultRevision() == TRUE) {
      // Get all of the revision ids.
      $revision_ids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($entity);
      //$current_revision_id = $node->getRevisionId();
      // Check if the last item in the revisions is the loaded one.
      $last_revision_id = end($revision_ids);
      if ($entity->getRevisionId() != $last_revision_id) {
        // Load the revision.
        $last_revision = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($last_revision_id);
        // Get the revisions moderation state.
        $last_revision_state = $last_revision->get('moderation_state')->getString(); // It will give you the machine name name.
        $variables['output'] = $last_revision_state;
      }
    }


	// Sets the moderation states options for the scripts.
    $variables['moderation_states'] = [];
    $latest_node = \Drupal::service('content_moderation.moderation_information')->getLatestRevision('node', $node->id());
    $default_state = $latest_node->get('moderation_state')->getString();
    $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($node);
    if ($workflow) {
      $type_settings = $workflow->get('type_settings');
      if (isset($type_settings['transitions']) && !empty($type_settings['transitions'])) {
        foreach ($type_settings['transitions'] as $lable => $info) {
          if (in_array($default_state, $info['from'])) {
            $variables['moderation_states'][$info['to']] = $type_settings['states'][$info['to']]['label'];
          }
        }
        $variables['default_state']['state'] = $default_state;
        $variables['default_state']['label'] = $type_settings['states'][$default_state]['label'];
      }
    }